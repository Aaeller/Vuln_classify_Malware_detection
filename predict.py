import tensorflow as tf
from tensorflow.contrib.layers.python.layers import batch_norm
import numpy as np
import picdeal as pd
import batch_matlab as bm
import os


def weight_variable(shape):
    #正态分布，标准差0.1,
    inite = tf.truncated_normal(shape=shape, stddev=0.1)
    return tf.Variable(inite)
def bias_variable(shape):
    #创建一个结构为shape矩阵，也可以为数组shape声明行列，初始化所有值为0.1
    inite = tf.constant(0.1, shape=shape)
    return tf.Variable(inite)
def conv2d(x, W):
    #卷积遍历各方向步数为1.SAME：边缘外自动补0，遍历相乘
    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding="SAME")
def max_pool_2x2(x):
    # 池化卷积结果（conv2d）池化层采用kernel大小为2*2，步数也为2，SAME：周围补0，取最大值。数据量缩小了4倍
    # x 是 CNN 第一步卷积的输出量，其shape必须为[batch, height, weight, channels];
    # ksize 是池化窗口的大小， shape为[batch, height, weight, channels]
    # stride 步长，一般是[1，stride， stride，1]
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')

def batch_norm_layer(value, train=None, name='batch_norm'):
    if train is not None:
        return batch_norm(value, decay=0.9, updates_collections=None, is_training=True)
    else:
        return batch_norm(value, decay=0.9, updates_collections=None, is_training=False)

def read_model(filedir, fname, wdir):
    tf.reset_default_graph()
    x = tf.placeholder(tf.float32, [None, 512])
    y_ = tf.placeholder(tf.float32, [None, 9])
    train = tf.placeholder(tf.int64)
    keep_prob = tf.placeholder(tf.float32)
    x_image = tf.reshape(x, [-1, 32, 16, 1])

    W_conv1 = weight_variable([5,5,1,32])
    b_conv1 = bias_variable([32])
    h_conv1 = tf.nn.relu(batch_norm_layer(value=(conv2d(x_image, W_conv1) + b_conv1), train=train))
    h_pool1 = max_pool_2x2(h_conv1)

    W_conv2_5x5 = weight_variable([5, 5, 32, 32])
    b_conv2_5x5 = bias_variable([32])
    h_conv2_5x5 = tf.nn.relu(batch_norm_layer(value=(conv2d(h_pool1, W_conv2_5x5) + b_conv2_5x5), train=train))
    W_conv2_7x7 = weight_variable([3, 3, 32, 32])
    b_conv2_7x7 = bias_variable([32])
    h_conv2_7x7 = tf.nn.relu(batch_norm_layer(value=(conv2d(h_pool1, W_conv2_7x7) + b_conv2_7x7), train=train))
    h_conv2 = tf.concat([h_conv2_5x5, h_conv2_7x7], 3)
    h_pool2 = max_pool_2x2(h_conv2)

    W_fc1 = weight_variable([8*4*64, 1024])
    b_fc1 = bias_variable([1024])
    h_pool3_flat = tf.reshape(h_pool2, [-1, 8*4*64])
    h_fc1 = tf.nn.relu(tf.matmul(h_pool3_flat, W_fc1) + b_fc1)
    h_fc1_drop = tf.nn.dropout(h_fc1, rate= 1 - keep_prob)

    W_fc2 = weight_variable([1024,9])
    b_fc2 = bias_variable([9])
    y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2

    pre = tf.argmax(y_conv, 1)

    global_step = tf.Variable(0, trainable=False)
    decaylearning_rate = tf.train.exponential_decay(0.001, global_step, 1000, 0.9)
    cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y_, logits=y_conv))
    train_step = tf.train.AdamOptimizer(decaylearning_rate).minimize(cross_entropy, global_step=global_step)

    correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))


    sess =tf.InteractiveSession()
    sess.run(tf.global_variables_initializer())

    sever = tf.train.Saver()
    savedir = "log/"


    kpt = tf.train.latest_checkpoint(savedir)
    if kpt != None:
        sever.restore(sess, kpt)

    dir = r'J:\malware\test_file\pic'

    print(fname)
    s = pd.deal_pic(dir, fname, wdir)
    print(s)
    filename = bm.call_matlab(s)
    image_data = np.fromfile(filename, dtype=np.float, sep=" ")
    batch_x = np.reshape(image_data, newshape=[-1, 512])
    percent = sess.run(y_conv, feed_dict={x:batch_x, keep_prob:1})
    p = sess.run(pre, feed_dict={x:batch_x, keep_prob:1})
    print(percent[0][p[0]])
    print("file name: %s, prediction class: %d" %(filename.split('\\')[-1], p[0]+1))
    sess.close()
    return percent[0][p[0]], p[0]

if __name__ == '__main__':
    byte_dir = r'J:\malware\test_file\bytes'
    wdir = r'J:/malware/test_file/deal_pic'
    read_model(byte_dir, 'xoeAJwTZlREzCbfg5HG1.jpg', wdir)

