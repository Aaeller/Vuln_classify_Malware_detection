import openpyxl
import pandas as pd
import numpy as np

np.random.rand()
workbook = openpyxl.load_workbook('cve.xlsx')
sheetnames = workbook.sheetnames
values = []
# data_list = []
id=[]
descript=[]
type=[]
for sheetname in sheetnames:
    worksheet = workbook[sheetname]
    max_row = worksheet.max_row
    max_col = worksheet.max_column
    column_names = ['id', 'descript','type']

    i = max_row-1
    values.append(i)
    sum = 0


    for i in range(2,max_row+1):
        data = {}
        for j in range(1,4):

            if j==1:
                # data['id'] = worksheet.cell(row=i, column=j).value
                id.append(worksheet.cell(row=i, column=j).value)
            if j==2:
                # data['descript'] = worksheet.cell(row=i, column=j).value
                descript.append(worksheet.cell(row=i, column=j).value)
            if j==3:
                # data['type'] = worksheet.cell(row=i, column=j).value
                type.append(worksheet.cell(row=i, column=j).value)
        # data_list.append(data)

df = pd.DataFrame({'id': id,'descript': descript,'type': type})
gbr = df.groupby('type')




# df.to_excel('test.xlsx')

train_rate = 0.0646078304690528492053236852
num_tup = np.array(values)


num_train_tup = np.array([(int)(round(i*train_rate)) for i in num_tup])
num_test_tup = num_tup - num_train_tup
print(num_train_tup)
print(num_test_tup)

typicalNDict_train = {'Overflow': num_train_tup[0], 'Denial Of Service': num_train_tup[1], 'Execute Code': num_train_tup[2], 'Memory corruption': num_train_tup[3],'Sql Injection': num_train_tup[4], 'XSS': num_train_tup[5], 'Directory traversal': num_train_tup[6],'Http response splitting':num_train_tup[7],'Bypass a restriction or similar': num_train_tup[8],'Gain Information':num_train_tup[9], 'Gain privileges':num_train_tup[10],'CSRF ':num_train_tup[11],'File Inclusion ':num_train_tup[12]}
# typicalNDict_train = {'Overflow': num_train_tup[0], 'Denial Of Service': num_train_tup[1], 'Execute Code': num_train_tup[2], 'Memory corruption': num_train_tup[3],'Sql Injection': num_train_tup[4], 'XSS': num_train_tup[5], 'Directory traversal': num_train_tup[6],'Http response splitting':num_train_tup[7],'Bypass a restriction or similar': num_train_tup[8],'Gain Information':num_train_tup[9], 'Gain privileges':num_train_tup[10],'CSRF ':num_train_tup[11],'File Inclusion ':num_train_tup[12]}
# typicalNDict_train = {1: num_train_tup[0], 2: num_train_tup[1], 3: num_train_tup[2], 4: num_train_tup[3],5: num_train_tup[4], 6: num_train_tup[5], 7: num_train_tup[5],8: num_train_tup[5],9:num_train_tup[5], 10:num_train_tup[5],11:num_train_tup[5],12:num_train_tup[5],13:num_train_tup[5]}


def typicalsamling(group, typicalNDict):
    name = group.name
    n = typicalNDict[name]
    return group.sample(n=n)


result_train = df.groupby('type').apply(typicalsamling, typicalNDict_train)
print(result_train.head())
result_train.to_excel('train.xlsx', index=False)



for i in values:
    sum = sum + i
print(sum)
for i in values:
    avg = i/sum
    print(avg)