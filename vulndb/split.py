import openpyxl
import pandas as pd
import numpy as np

np.random.rand()
workbook = openpyxl.load_workbook('train.xlsx')
values = []
id=[]
descript=[]
type=[]

worksheet = workbook["Sheet1"]
max_row = worksheet.max_row
max_col = worksheet.max_column
column_names = ['id', 'descript','type']

i = max_row-1
values.append(i)
print(values)


for i in range(2,max_row+1):
    data = {}
    for j in range(1,4):

        if j==1:
            id.append(worksheet.cell(row=i, column=j).value)
        if j==2:
            descript.append(worksheet.cell(row=i, column=j).value)
        if j==3:
            type.append(worksheet.cell(row=i, column=j).value)

df = pd.DataFrame({'id': id,'descript': descript,'type': type})
gbr = df.groupby('type')




# df.to_excel('test.xlsx')

train_rate = 0.97
num_tup = np.array(values)
# print(num_tup)



num_train_tup = np.array([(int)(round(i*train_rate)) for i in num_tup])
num_test_tup = num_tup - num_train_tup

print(num_test_tup)


typicalNDict_train = {'Bypass a restriction or similar': num_train_tup[0], 'CSRF ': num_train_tup[1], 'Denial Of Service': num_train_tup[2], 'Directory traversal': num_train_tup[3],'Execute Code': num_train_tup[4], 'File Inclusion ': num_train_tup[5], 'Gain Information': num_train_tup[6],'Gain privileges':num_train_tup[7],'Http response splitting': num_train_tup[8],'Memory corruption':num_train_tup[9], 'Overflow':num_train_tup[10],'Sql Injection':num_train_tup[11],'XSS':num_train_tup[12]}
# typicalNDict_train = {'Overflow': num_train_tup[0], 'Denial Of Service': num_train_tup[1], 'Execute Code': num_train_tup[2], 'Memory corruption': num_train_tup[3],'Sql Injection': num_train_tup[4], 'XSS': num_train_tup[5], 'Directory traversal': num_train_tup[6],'Http response splitting':num_train_tup[7],'Bypass a restriction or similar': num_train_tup[8],'Gain Information':num_train_tup[9], 'Gain privileges':num_train_tup[10],'CSRF ':num_train_tup[11],'File Inclusion ':num_train_tup[12]}
# typicalNDict_train = {1: num_train_tup[0], 2: num_train_tup[1], 3: num_train_tup[2], 4: num_train_tup[3],5: num_train_tup[4], 6: num_train_tup[5], 7: num_train_tup[5],8: num_train_tup[5],9:num_train_tup[5], 10:num_train_tup[5],11:num_train_tup[5],12:num_train_tup[5],13:num_train_tup[5]}


def typicalsamling(group, typicalNDict):
    name = group.name
    n = typicalNDict[name]
    return group.sample(n=n)


result_train = df.groupby('type').apply(typicalsamling, typicalNDict_train)
print(result_train.head())
result_train.to_excel('simple.xlsx', index=False)